---
description: 
globs: *.vue,*.js
alwaysApply: false
---
// 代码风格和结构
- 使用函数式、声明式编程模式
- 优先使用迭代和模块化，避免代码重复
- 使用描述性的变量名，包含助动词（如 isLoading、hasError）
- 系统地组织文件：每个文件只包含相关内容，如导出组件、子组件、辅助函数、静态内容和类型
- 目录使用小写字母和破折号（如 components/auth-wizard）
- 优先使用命名导出函数
- 使用 function 关键字定义纯函数，以获得提升和清晰度优势
- 函数参数优先使用接收对象、返回对象（RORO）模式
- 简单条件语句优先使用单行语法（如 if (condition) doSomething()）
- 所有代码使用 TypeScript，优先使用接口而非类型，避免使用枚举，使用映射代替以获得更好的类型安全性和灵活性

// 错误处理和验证
- 在函数开始时处理错误和边缘情况
- 使用提前返回处理错误条件，避免深层嵌套的 if 语句
- 使用守卫子句提前处理前置条件和无效状态
- 避免不必要的 else 语句，使用 if-return 模式代替
- 实现适当的错误日志记录和用户友好的错误消息
- 考虑使用自定义错误类型或错误工厂确保一致的错误处理

// 项目结构
-  src/assets 所有的素材和资源都放在这个下面（图片、MP3。。。。）
-  src/components 下面放所有的组件（组件就是一个一个的小元素，比如按钮、输入框、卡片、弹窗、菜单...）
-  src/router 是页面路由，如果要新增一个单独的页面，记得修改
-  src/stores 是一些全局的存储，比如登录信息、用户信息之类，方便多个页面之间共享
-  src/views  是页面目录，下每一个文件夹都是一个单独的页面
-  src/services 所有的请求按照功能模块目录放到此目录下
-  src/App.vue 项目的主入口文件

// figma
- 优先使用已有的资源，设计中取到图片就优先使用图片
- 不要将读取到的内容做格式转换
- 不要将image转为svg
- 基于figma设计时，不要发散，严格按照设计稿样式还原
- 优先使用图片做图标不要优先使用svg
- 不要使用远程图片地址，将图片下载到本地